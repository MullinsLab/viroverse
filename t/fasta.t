#!/usr/bin/env perl
use strict;
use warnings;
use Test::More;
use Test::Warnings 0.005 ':all';
use Test::Deep;
use File::Temp qw(tempfile);
use Fasta;

sub warnings_are (&$$) {
    my ($code, $expected, $desc) = @_;
    local $Test::Builder::Level = $Test::Builder::Level + 1;
    cmp_deeply(
        [ warnings { $code->() } ],
        $expected,
        $desc,
    );
}

for my $nl ("\x0a", "\x0d", "\x0d\x0a") {
    my $nl_name = sprintf "%#*v.2x", " ", $nl;

    my $data = data();
       $data =~ s/(\x0d\x0a|\x0d|\x0a)/$nl/g;

    my ($fh, $fn) = tempfile("fasta-XXXX", TMPDIR => 1, UNLINK => 1);
    binmode($fh, ':raw'); # disable :crlf layer
    print { $fh } $data, "\n";
    close $fh or die "Error closing $fn: $!";

    my @expected_warnings = (
        re(qr/removed 3 gap-like characters from gapped/),
        re(qr/removed 3 gap-like characters from bad/),
        re(qr/skipped bad because of illegal char 'F'/),
    );

    subtest "Basic parsing - newlines of $nl_name" => sub {
        my $seq;
        warnings_are { $seq = Fasta::string2hash(\$data) }
            \@expected_warnings, "Caught carps about gaps and illegal char";
        is(ref $seq, 'HASH', "Got a hash ref");
        is(scalar keys %$seq, 3, "Three keys");
        is((scalar grep defined && length, values %$seq), 3, "Three defined values of non-zero length");
        ok($seq->{'foo_bar.baz|123'}, "Sequence name parsed into key");
        ok($seq->{'some_name'},       "Sequence name with spaces parsed into key");
        ok($seq->{'gapped'},          "Got gapped sequence");
        ok(!$seq->{'bad'},            "Skipped bad sequence");
        unlike($seq->{'gapped'}, qr/[ -.]/, "Gapped sequence has gaps stripped");
        warnings_are {
            is_deeply(Fasta::filename2hash($fn), $seq, "Parsing file yields same results");
        } \@expected_warnings, "caught expected warnings";
    };

    # Remove warnings about gaps
    splice @expected_warnings, 0, 2;

    subtest "Gaps allowed - newlines of $nl_name" => sub {
        my $seq;
        warnings_are { $seq = Fasta::string2hash(\$data, 'KEEP GAPS') }
            \@expected_warnings,
            "Caught carp about illegal char";
        is(ref $seq, 'HASH', "Got a hash ref");
        is(scalar keys %$seq, 3, "Three keys");
        is((scalar grep defined && length, values %$seq), 3, "Three defined values of non-zero length");
        ok($seq->{'foo_bar.baz|123'}, "Sequence name parsed into key");
        ok($seq->{'some_name'},       "Sequence name with spaces parsed into key");
        ok($seq->{'gapped'},          "Got gapped sequence");
        ok(!$seq->{'bad'},            "Skipped bad sequence");
        like($seq->{'gapped'}, qr/[ -.]/, "Gapped sequence contains gaps");
        warnings_are {
            is_deeply(Fasta::filename2hash($fn, 'KEEP GAPS'), $seq, "Parsing file yields same results");
        } \@expected_warnings, "caught expected warnings";
    };
}

done_testing;

sub data {
    return <<FASTA
>foo_bar.baz|123
GAGTGAAGGAGATCAGGAAGATTTGTCAGAACTTCTTGGGATGGGGCACC
TTGCTCCTGGGAATATTGACGATCTGTAATGCTGCAGAGAACTTGTGGGT
CACAGTCTATTATGGGGTACCTGTGTGGAAAGACGCAACCACCACTCTAT
TTTGTGCATCAGATGCTAAAGGATATGAGACAGAGATGCATAATGTCTGG
GCCACACATGCCTGTGTACCCACAGACCCCAGCCCACAAGAAGTAGTACT
GGGAAATGTGACAGAAAATTTTAACATGTGGAAAAATAACATGGTAGAAC
AGATGCAGGAGGATATAATCAGTTTATGGGATCAAAGCCTAAAGCCATGT
GTAAAATTAACCCCACTCTGTGTTACTTTAGRTTGCTCTGATGTAGGGGG
GAACAATACTAAGGGGAATAATAGCAGTCATAATCTTACTGCTTGGGGAA
TAGAAGATAAAGGAGAAATAAAAAACTGCTCTTTCAATGTCACCGCAAGC
ATAAGAGACAAAGTACACAAAGAATATGGACTTTTTTATAAACTTGATGT
AGTACCACTAGATAATGATAATAGGAGCTATAGATTGATAAGTTGTAATA
CCTCAGTCATTACACAGGCCTGTCCAAAGGTATCCTTTGAGCCAATTCCC
ATACATTATTGTGCCCCGGCTGGTTTTGCGATTCTAAAGTGTAACAACAA
GACATTCAATGGAACAGGACCATGTACAAATGTCAGCACAGTACAATGTA
CACATGGAATTAGGCCAGTAGTGTCAACTCAATTGCTGTTAAATGGCAGT
CTAGCAGAAGAAGAGATAGTAATTAGATCTGAAAATTTCTCAGACAATGC
TAAAATCATAATAGTACAGCTGAATGAATCTGTAGTAATTAATTGTACAA
GACCCAACAACAATACAAGAAGGAGCATACATATAGGACCAGGGAGAGCC
TTTTATGCAGCAGGAGAAATAATAGGAGATATAAGAAAAGCACATTGTAA
CATTTCTAGAGCAAAATGGAATAACACGTTAAAACAAATAGCTGAAAAAT
TAAGAGAACAATTTGTGAATAAAACAATAGTCTTTCAGAACTCCTCAGGA
GGAGACCCAGAACTTGTAATGCACAGTTTCAATTGTAGAGGGGAATTTTT
CTACTGTAATACAACAGCACTGTTCAGTAGTATTTGGAATAATACTGGGA
ATAGCACTGGGGAAGAGTTAAATGGCCCTGAAAATATCACACTCCAATGT
AGAATAAAACAAATTATAAACATGTGGCAGGAAGTAGGCAAGGCAATGTA
TGCCCCTCCCATCGCAGGACCAATTAGCTGTGCTTCAAATATTACAGGGC
TGCTATTAACAAGAGATGGTGGTGGTGATAATAACAGATCCGACGAGACC
TTCAGACCTATAGGAGGAGAGATGAAGGACAATTGGAGAAGTGAATTATA
TAAATATAAAGTAGTAAGAATTGAACCATTAGGAATAGCACCCACCACGG
CAAGGAGAAGAGTGGTGCAGAGAGAAAAAAGAGCAGTAACACTGGGAGCT
ATGTTCCTTGG
>some_name - A nickname
GAGTGAAGGAGATCAGGAAGATTTGTCAGAACTTCTTGGGATGGGGCACC
TTGCTCCTGGGAATATTGATGATCTGTAATGCTGCAGAGAACTTGTGGGT
CACAGTCTATTATGGGGTACCTGTGTGGAAAGACGCAACCACCACTCTAT
TTTGTGCATCAGATGCTAAAGGATATGAGACAGAGGTACATAATGTCTGG
GCCACACATGCCTGTGTACCCACAGACCCCAGCCCACAAGAAGTAGTACT
GGGAAATGTGACAGAAAATTTTAACATGTGGAAAAATAACATGGTAGAAC
AGATGCAGGAGGATATAATCAGTTTATGGGATCAAAGCCTAAAGCCATGT
GTAAAATTAACCCCACTCTGTGTTACTTTACATTGCTCTGATGTAGGGGG
GAACAATACTAAGGGGCATGGTACTAATAGCACTCATAATTATACTGCTT
GGGAAATAGAAGATAAAGGAGAAATAAAAAACTGCTCTTTCAATGTCACC
GCAAGCATAAGAGATAAGGTACACAAAGAATATGGACTTTTTTATAAACT
CGATGTAGTACCACTAGATAGTGATAATAGGAGCTATAGATTGATAAGTT
GTAATACCTCAGTCATTACACAGGCCTGTCCAAAGGTATCCTTTGAGCCA
ATTCCCATACATTATTGTGCCCCGGCTGGTTTTGCGATTCTAAAGTGTAA
CAATAAGACATTCAATGGAACAGGACCATGTACAAATGTCAGCACAGTAC
AATGTACACATGGAATTAGGCCAGTAGTGTCAACTCAATTGCTGTTAAAT
GGCAGTCTAGCAGAAGAAGAGATAGTAATTAGATCTGAAAATTTCTCAGA
CAATGCAAAAATCATAATAGTACAGCTGAATGAATCTGTAGTAATTAATT
GTACAAGACCCAACAACAATACAAGAAGGAGCATACATATAGGACCAGGG
AGAGCCTTTTATACAGCAGGAGAAATAATAGGAGATATAAGAAAAGCACA
TTGTAACATTTCTAGAGCAAAATGGAATAACACTTTAAAACAAATAGCTG
AAAAATTAAGAGAACAATTTGTGAATAAAACAATAGTCTTTAAGAACTCC
TCAGGAGGAGACCCAGAACTTGTAATGCACAGTTTCAATTGTAGAGGGGA
ATTTTTCTACTGTAATACAACAGCACTGTTCAATAGTATTTGGAATAATA
CTGGGAATAGCACTGGGGAAGAGTTAAATGGCCCTGAAAATATCACACTC
CAATGTAGAATAAAACAAATTATAAACATGTGGCAGGAAGTAGGCAAGGC
AATGTATGCCCCTCCCATCGCAGGACCAATTAGCTGTGCATCAAATATTA
CAGGGCTGCTATTAACAAGAGATGGTGGTGGTAGTAATAACAGATCCGAC
GAGACCTTCAGACCTATAGGAGGAGAAATGAAGGACAATTGGAGAAGTGA
ATTATATAAATATAAAGTAGTAAGAATTGAACCATTAGGAATAGCACCCA
CCACGGCAAGGAGAAGAGTGGTGCAGAGAGAAAAAAGAGCAGTAACACTA
GGAGCTATGTTCCTTGG
>gapped - another name
GAGTGAAGG.GATCAGGAAGATTTGTCAGAACTTCTT-GGATGGGGCACC
TTGCTCCTGGGAATATTGATGATCTGTAATGCTGC GAGAACTTGTGGGT
cattttctattatggggtacctgtgtggaaagacgcaaccaccactctat
>bad - another name
GAGTGAAGG.GATCAGGAAGATTTGTCAGAACTTCTT-GGATGGGGCACC
TTGCTCCTGGGAATATTGATGATCTGTAATGCTGC GAGAACTTGTGGGT
catFFFctattatggggtacctgtgtggaaagacgcaaccaccactctat
FASTA
}
